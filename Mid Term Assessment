{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "0e0d3899-3168-4710-adab-ca2c2a0cd839",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your full name: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " Danny Tan\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your year of birth: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 1890\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a valid date - year of birth must be greater than 1900!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 2000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your enrolled course: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " Grad Cert in Cybersecurity\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student \"Danny Tan\" has enrolled in the course \"Grad Cert in Cybersecurity\".\n",
      "The student is 22 years old.\n"
     ]
    }
   ],
   "source": [
    "#Question 1\n",
    "\n",
    "print(\"Please enter your full name: \")\n",
    "fullName = input()\n",
    "print(\"Please enter your year of birth: \")\n",
    "yob = int(input())\n",
    "\n",
    "while yob < 1900:\n",
    "    print(\"Please enter a valid date - year of birth must be greater than 1900!\")\n",
    "    yob = int(input())\n",
    "else:\n",
    "    age = 2022 - yob\n",
    "    \n",
    "print(\"Please enter your enrolled course: \")\n",
    "course = input()\n",
    "\n",
    "\n",
    "\n",
    "print('{0} \"{1}\" {2} \"{3}\".'.format('Student', fullName, 'has enrolled in the course', course)) \n",
    "print('{0} {1} {2}'.format('The student is', age, 'years old.'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9dc07a5f-afbe-4a09-a997-b528761ca1c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your full name: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " Harry Potter\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your year of birth: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 1700\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a valid date - year of birth must be greater than 1900. You are currently 322 years old!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 2024\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a valid date! It is currently 2 years until you are born!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 2008\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your enrolled course: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " Comp801\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student \"Harry Potter\" has enrolled in the course \"Comp801\".\n",
      "The student is 14 years old.\n"
     ]
    }
   ],
   "source": [
    "#Question 1 Advanced (had fun playing around with this so thought I might as well include it.Ignore if not allowed!) \n",
    "\n",
    "\n",
    "print(\"Please enter your full name: \")\n",
    "fullName = input()\n",
    "print(\"Please enter your year of birth: \")\n",
    "yob = int(input())\n",
    "\n",
    "\n",
    "while yob < 1900 or yob > 2022:\n",
    "    oldAge = 2022 - yob\n",
    "    notBorn = yob - 2022\n",
    "    if yob < 1900:\n",
    "        print(\"Please enter a valid date - year of birth must be greater than 1900. You are currently\", oldAge, \"years old!\")\n",
    "        yob = int(input())\n",
    "    elif yob > 2022:\n",
    "        print(\"Please enter a valid date! It is currently\", notBorn, \"years until you are born!\") \n",
    "        yob = int(input())\n",
    "else:\n",
    "    age = 2022 - yob\n",
    "    \n",
    "print(\"Please enter your enrolled course: \")\n",
    "course = input()\n",
    "print('{0} \"{1}\" {2} \"{3}\".'.format('Student', fullName, 'has enrolled in the course', course)) \n",
    "print('{0} {1} {2}'.format('The student is', age, 'years old.'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "75d42bb5-047a-44ed-803d-b5accda5c12a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter the mark of your first subject :\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 75\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter the mark of your second subject :\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 63.5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter the mark of your third subject :\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 85\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter the mark of your fourth subject :\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 87\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Which semester are you studying? \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " semester 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your average grade for the semester 1 is ( 75.0 + 63.5 + 85.0 + 87.0 )/4 = 77.62\n"
     ]
    }
   ],
   "source": [
    "#Question 2\n",
    "\n",
    "print(\"Please enter the mark of your first subject :\")\n",
    "grade1 = float(input())\n",
    "print(\"Please enter the mark of your second subject :\")\n",
    "grade2 = float(input())\n",
    "print(\"Please enter the mark of your third subject :\")\n",
    "grade3 = float(input())\n",
    "print(\"Please enter the mark of your fourth subject :\")\n",
    "grade4 = float(input())\n",
    "print(\"Which semester are you studying? \")\n",
    "semester = input()\n",
    "\n",
    "average = (grade1 + grade2 + grade3 + grade4)/4\n",
    "\n",
    "print(\"Your average grade for the\", semester, \"is (\", grade1, \"+\", grade2, \"+\", grade3, \"+\", grade4, \")/4 =\", round(average, 2))\n",
    "\n",
    "#See attached notes in PDF submission! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "cb5688bd-f8da-4678-b131-ab472c21b91e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your 1st subject code: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " Comp804\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your 1st subject title: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " Web Security\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your final mark of the 1st subject: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 79\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your 2nd subject code: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " Comp802\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your 2nd subject title: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " Database Security\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your final mark of the 2nd subject: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 89\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your enrolled subjects:\n",
      "Comp804: Web Security\n",
      "Comp802: Database Security\n",
      "You get a high-distinction mark for 1 subject.\n"
     ]
    }
   ],
   "source": [
    "#Question 3\n",
    "print(\"Please enter your 1st subject code: \")\n",
    "sub1 = input()\n",
    "print(\"Please enter your 1st subject title: \")\n",
    "sub1Title = input()\n",
    "print(\"Please enter your final mark of the 1st subject: \")\n",
    "mark1 = int(input())\n",
    "\n",
    "print(\"Please enter your 2nd subject code: \")\n",
    "sub2 = input()\n",
    "print(\"Please enter your 2nd subject title: \")\n",
    "sub2Title = input()\n",
    "print(\"Please enter your final mark of the 2nd subject: \")\n",
    "mark2 = int(input())\n",
    "\n",
    "\n",
    "if mark1 >= 85:\n",
    "    grade1 = 'High-Distinction'\n",
    "elif mark1 >= 75:\n",
    "    grade1 = 'Distinction'\n",
    "elif mark1 >= 65: \n",
    "    grade1 = 'Credit'\n",
    "elif mark1 >= 500:\n",
    "    grade1 = 'Pass' \n",
    "else: \n",
    "    grade1 = 'Fail'\n",
    "\n",
    "if mark2 >= 85:\n",
    "    grade2 = 'high-distinction'\n",
    "elif mark2 >= 75:\n",
    "    grade2 = 'distinction'\n",
    "elif mark2 >= 65: \n",
    "    grade2 = 'credit'\n",
    "elif mark2 >= 500:\n",
    "    grade2 = 'pass' \n",
    "else: \n",
    "    grade2 = 'fail'\n",
    "\n",
    "\n",
    "if grade1 == grade2:\n",
    "    no_of_sub = 2\n",
    "else:\n",
    "    no_of_sub = 1\n",
    "\n",
    "if mark1 >= mark2:\n",
    "    finalMark = grade1\n",
    "else: finalMark = grade2\n",
    "\n",
    "if no_of_sub == 1:\n",
    "    s = \"subject\"\n",
    "else:\n",
    "    s = \"subjects\"\n",
    "    \n",
    "print(\"Your enrolled subjects:\")\n",
    "print('{0}: {1}'.format(sub1, sub1Title))\n",
    "print('{0}: {1}'.format(sub2, sub2Title))\n",
    "    \n",
    "print('{0} {1} {2} {3} {4}.'.format(\"You get a\", finalMark, \"mark for\", no_of_sub, s))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "a139d963-d080-43ed-856a-f267cb91882a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "How many adult tickets do you want to order:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "How many child (>= 10 years old) tickets:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "How many child (<10 years old) tickets:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type             Number of Tickets    Cost   \n",
      "Adult                     2          $101.00         \n",
      "Children (>=10)           3          $31.50          \n",
      "Children (<10)            2           free           \n",
      "Total                     7          $132.50         \n"
     ]
    }
   ],
   "source": [
    "#Question 4\n",
    "print(\"How many adult tickets do you want to order:\")\n",
    "adultNo = int(input())\n",
    "print(\"How many child (>= 10 years old) tickets:\")\n",
    "childNo = int(input())\n",
    "print(\"How many child (<10 years old) tickets:\")\n",
    "freeNo = int(input())\n",
    "\n",
    "adultPrice = float(50.50)\n",
    "childPrice = float(10.50)\n",
    "under10Price = 0\n",
    "\n",
    "\n",
    "adultTotal = adultPrice * adultNo\n",
    "childTotal = childPrice * childNo\n",
    "\n",
    "totalTickets = adultNo + childNo + freeNo\n",
    "totalPrice = float(adultTotal + childTotal)\n",
    "\n",
    "adultTotal = '{0:.2f}'.format(adultTotal)\n",
    "childTotal = '{0:.2f}'.format(childTotal)\n",
    "totalPrice = '{0:.2f}'.format(totalPrice)\n",
    "\n",
    "print('{0:16} {1:10} {2:^10}'.format(\"Type\", \"Number of Tickets\", \"Cost\"))\n",
    "print('{0:16} {1:10} {2:^25}'.format(\"Adult\", adultNo, '${:}'.format(adultTotal)))\n",
    "print('{0:16} {1:10} {2:^25}'.format(\"Children (>=10)\", childNo, '${:}'.format(childTotal)))\n",
    "print('{0:16} {1:10} {2:^25}'.format(\"Children (<10)\", freeNo, \"free\"))\n",
    "print('{0:16} {1:10} {2:^25}'.format(\"Total\", totalTickets, '${:}'.format(totalPrice)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "73600920-57a1-4c5f-8943-f94c8c88385b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a number (2-10):\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a symbol (?, -, *, +, $):\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " *\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Go forward:\n",
      "1  *\n",
      "2  * *\n",
      "3  * * *\n",
      "4  * * * *\n",
      "5  * * * * *\n",
      "Go backward:\n",
      "* * * * *  5\n",
      "* * * *  4\n",
      "* * *  3\n",
      "* *  2\n",
      "*  1\n"
     ]
    }
   ],
   "source": [
    "#Question 5 \n",
    "\n",
    "print(\"Please enter a number (2-10):\")\n",
    "number = int(input())\n",
    "print(\"Please enter a symbol (?, -, *, +, $):\")\n",
    "symbol = input()\n",
    "\n",
    "print(\"Go forward:\")\n",
    "for y in range(0, number):\n",
    "    pattern = \"\"\n",
    "    for x in range(0, 1*y + 1): \n",
    "        pattern = pattern + \" \" + symbol\n",
    "        number = x + 1\n",
    "    print(number, pattern)\n",
    "\n",
    "print(\"Go backward:\")\n",
    "for y in range(0, number):\n",
    "    pattern2 = \"\"\n",
    "    for k in range(0, y*-1 + number): \n",
    "        pattern2 = pattern2 + symbol + \" \" \n",
    "        count = k + 1\n",
    "    print(pattern2, count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "c6d4ad3e-a1cc-4f72-92d0-84d6f83a2f75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a number to be added at the beginning of the list (0-100):\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 25\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a number to be added at the end of the list (0-100):\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 99\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The list after adding the two input numbers includes:  [25, 3, 7, 9, 12, 87, 78, 99]\n",
      "The new list with numbers in ascending order:  [3, 7, 9, 12, 25, 78, 87, 99]\n",
      "The new list with numbers in descending order:  [99, 87, 78, 25, 12, 9, 7, 3]\n",
      "The sum of all numbers in the list:  320\n",
      "Even numbers in the list include:  12, 78, \n",
      "The numbers in the odd positions (using the list with ascending order) include: 7, 12, 78, 99, \n"
     ]
    }
   ],
   "source": [
    "#Question 6\n",
    "\n",
    "print(\"Please enter a number to be added at the beginning of the list (0-100):\")\n",
    "start_no = int(input())\n",
    "print(\"Please enter a number to be added at the end of the list (0-100):\")\n",
    "end_no = int(input())\n",
    "\n",
    "list1 = [3,7,9,12,87,78]\n",
    "list2 = [start_no] + list1 + [end_no]\n",
    "print(\"The list after adding the two input numbers includes: \", list2)\n",
    "\n",
    "\n",
    "list2.sort()\n",
    "print(\"The new list with numbers in ascending order: \", list2)\n",
    "\n",
    "list2.sort(reverse = True)\n",
    "\n",
    "print(\"The new list with numbers in descending order: \", list2)\n",
    "\n",
    "\n",
    "sum = 0\n",
    "for x in list2: \n",
    "    sum = sum + x\n",
    "\n",
    "print(\"The sum of all numbers in the list: \", sum)\n",
    "\n",
    "\n",
    "\n",
    "list2.sort()\n",
    "result1 = \"\"\n",
    "for num in list2:\n",
    "    if num % 2 == 0:\n",
    "        result1 = result1 + str(num) + \", \"\n",
    "print(\"Even numbers in the list include: \", result1)\n",
    "\n",
    "list2.sort()\n",
    "result2 = \"\"\n",
    "for num in list2:\n",
    "    if num % 2 != 0:\n",
    "        result2 = result2 + \" \" + str(num)\n",
    "        \n",
    "list2.sort()\n",
    "oddPos = \"\"\n",
    "for pos in range(1, len(list2),2):\n",
    "    oddPos = oddPos + str(list2[pos]) + \", \"\n",
    "print(\"The numbers in the odd positions (using the list with ascending order) include:\", oddPos)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "88d22d49-4f2e-4d33-88e4-db5cb0937596",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tuple 1:  ('Hello', 'Cyber Security', 2022)\n",
      "Tuple2:  (2, 9, 8, 1, 15, 24, 'Session 3')\n",
      "The values of t3 that are a combination of tuple 1 and 2:  ('Hello', 'Cyber Security', 2022, 2, 9, 8, 1, 15, 24, 'Session 3')\n",
      "String values in the tuple t3 to include:  Hello, Cyber Security, Session 3\n",
      "Integer values in the tuple t3 include:  2022, 2, 9, 8, 1, 15, 24, \n",
      "The last value of t3 is:  Session 3\n",
      "The values from position 3 to position 10 are:  (2, 9, 8, 1, 15, 24, 'Session 3')\n"
     ]
    }
   ],
   "source": [
    "#Question 7\n",
    "\n",
    "t1 = (\"Hello\", \"Cyber Security\", 2022)\n",
    "t2 = (2,9,8,1,15,24, \"Session 3\")\n",
    "\n",
    "\n",
    " \n",
    "print(\"Tuple 1: \", t1)\n",
    "print(\"Tuple2: \", t2)\n",
    "\n",
    "\n",
    "t3 = t1 + t2\n",
    "\n",
    "print(\"The values of t3 that are a combination of tuple 1 and 2: \", t3)\n",
    "\n",
    "print(\"String values in the tuple t3 to include: \", t3[0] + \", \" + t3[1] + \", \" + t3[9])\n",
    "\n",
    "\n",
    "result = \"\"\n",
    "for x in t3:\n",
    "    if isinstance(x, int):\n",
    "        result = result + str(x) + \",\" + \" \" \n",
    "\n",
    "print(\"Integer values in the tuple t3 include: \", result)\n",
    "\n",
    "\n",
    "\n",
    "print(\"The last value of t3 is: \", t3[len(t3) - 1])\n",
    "\n",
    "print(\"The values from position 3 to position 10 are: \", t3[3:11])\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "ce3c8443-d8d1-4400-b952-40049d64c7a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Copy values from list1 to set1. The values of set1 are:  3 5 8 17 20\n",
      "Please enter a value to be added to set1: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 54\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a value to be added to set2: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 23\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current values of set1 are:  3 5 8 17 20 54\n",
      "Current values of set2 are:  2 4 5 6 7 23 9\n",
      "Create a set3 which includes all values of set1 and set2. Values in set3:  2 3 4 5 6 7 8 9 17 20 54 23\n",
      "Create a set4 that includes only common values of set1 and set2. Values in set4:  5\n",
      "Create a set5 that includes only the values that exist in set2 and not in set1. Values in set5:  2 4 6 7 9 23\n"
     ]
    }
   ],
   "source": [
    "#Question 8\n",
    "list1 = (3, 5, 8, 20, 17)\n",
    "set2 = {2, 6, 7, 4, 9, 5}\n",
    "set1 = set(list1)\n",
    "print(\"Copy values from list1 to set1. The values of set1 are: \", *set1)\n",
    "\n",
    "print(\"Please enter a value to be added to set1: \")\n",
    "value1 = int(input())\n",
    "set1.add(value1)\n",
    "print(\"Please enter a value to be added to set2: \")\n",
    "value2 = int(input())\n",
    "set2.add(value2)\n",
    "\n",
    "print(\"Current values of set1 are: \", *set1)\n",
    "print(\"Current values of set2 are: \", *set2)\n",
    "\n",
    "set3 = set1.union(set2)\n",
    "print(\"Create a set3 which includes all values of set1 and set2. Values in set3: \", *set3)\n",
    "\n",
    "set4 = set1.intersection(set2)\n",
    "print(\"Create a set4 that includes only common values of set1 and set2. Values in set4: \", *set4) \n",
    "\n",
    "set5 = set2.difference(set1)\n",
    "print(\"Create a set5 that includes only the values that exist in set2 and not in set1. Values in set5: \", *set5)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "a045da20-bb73-48ce-9c8f-fe72465ef2bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Values in dict1:  2 3 5 10\n",
      "Values in dict2:  100 200 300\n",
      "Please enter a number [0-300]: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The input number exists in dict1 and appears 1 time\n",
      "The input number does not exist in dict2.\n",
      "The key of the value 5 in dict1 is: d13\n"
     ]
    }
   ],
   "source": [
    "#Question 9\n",
    "dict1 = {'d11':2, 'd12':3, 'd13':5, 'd14':10,}\n",
    "dict2 = {'d21':100, 'd22':200, 'd23':300}\n",
    "\n",
    "  \n",
    "print(\"Values in dict1: \", *dict1.values())\n",
    "print(\"Values in dict2: \", *dict2.values())\n",
    "\n",
    "print(\"Please enter a number [0-300]: \")\n",
    "i = int(input())\n",
    "\n",
    "\n",
    "if i in dict1.values():\n",
    "    count = 0\n",
    "    for value in dict1.values():\n",
    "        if value == i:\n",
    "            count = count+1\n",
    "        if count == 1:\n",
    "            t = \"time\"\n",
    "        else:\n",
    "             t = \"times\"\n",
    "    print(\"The input number exists in dict1 and appears\", count,  t)\n",
    "\n",
    "else:\n",
    "    print(\"The input number does not exist in dict1.\")\n",
    "\n",
    "\n",
    "if i in dict2.values():\n",
    "    count = 0\n",
    "    for value in dict2.values():\n",
    "        if value == i:\n",
    "            count = count+1\n",
    "        if count == 1:\n",
    "            t = \"time\"\n",
    "        else:\n",
    "            t = \"times\"\n",
    "    print(\"The input number exists in dict2 and appears\", count,  t)\n",
    "    print(\"The key of the value\", i, \"in dict2 is:\", list(dict2.keys())\n",
    "    [list(dict2.values()).index(i)])\n",
    "else:\n",
    "    print(\"The input number does not exist in dict2.\")\n",
    "\n",
    "    if i in dict1.values():\n",
    "        print(\"The key of the value\", i, \"in dict1 is:\", list(dict1.keys())\n",
    "        [list(dict1.values()).index(i)])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "8bc42bae-2286-49ca-a281-fe0d4a354e8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a sentence: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " Green Eggs and Ham\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a letter: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " e\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Index      Letter    Matched    Counting \n",
      "    0          G          no         0     \n",
      "    1          r          no         0     \n",
      "    2          e         yes         1     \n",
      "    3          e         yes         2     \n",
      "    4          n          no         2     \n",
      "    5                     no         2     \n",
      "    6          E         yes         3     \n",
      "    7          g          no         3     \n",
      "    8          g          no         3     \n",
      "    9          s          no         3     \n",
      "    10                    no         3     \n",
      "    11         a          no         3     \n",
      "    12         n          no         3     \n",
      "    13         d          no         3     \n",
      "    14                    no         3     \n",
      "    15         H          no         3     \n",
      "    16         a          no         3     \n",
      "    17         m          no         3     \n",
      "Letter matched count: 3\n"
     ]
    }
   ],
   "source": [
    "#Question 10\n",
    "\n",
    "print(\"Please enter a sentence: \")\n",
    "sentence = input()\n",
    "print(\"Please enter a letter: \")\n",
    "target_letter = input()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print('{0:^10} {1:^10} {2:^10} {3:^10}'.format(\"Index\", \"Letter\", \"Matched\", \"Counting\")) \n",
    "current_letter = 0 \n",
    "count = 0 \n",
    "for x in range(0, len(sentence)):\n",
    "    current_letter = sentence[x]\n",
    "    if current_letter == target_letter.lower() or current_letter == target_letter.upper():\n",
    "        matched = \"yes\"\n",
    "        count = count + 1\n",
    "    else:\n",
    "        matched = \"no\"\n",
    "\n",
    "     \n",
    "    print('{0:^10} {1:^10} {2:^10} {3:^10}'.format(x, current_letter, matched, count))   \n",
    "print(\"Letter matched count:\", count)       \n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9702ec3a-b64a-4f9f-baf4-4b1b2f1f0126",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
